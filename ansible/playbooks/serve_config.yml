# serve_config.yml playbook
# Deploys the Flask config server application using Docker.

- name: Deploy serve_config application and configure base system
  hosts: serve_config_servers
  become: yes # Run most tasks with root privileges via sudo
  vars:
    app_dir: /opt/serve_config # Directory for application source code on host
    app_source_dir: "../../src/" # Relative path to source code on control machine
    config_source_dir: "../../config_files/" # Relative path to config files on control machine
    config_dir: /etc/serve_config # Directory for config files on host (mounted into container)
    app_user: "{{ ansible_user | default('nathan') }}" # User to own app/config dirs (defaults to connection user)

  tasks:
    # --------------------------------------------------------------------------
    # Wait for System Readiness
    # --------------------------------------------------------------------------
    - name: Wait for apt/dpkg locks to be released
      ansible.builtin.shell:
        cmd: while lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 5; done
      changed_when: false
      timeout: 300  # 5 minute timeout

    - name: Wait for cloud-init to complete
      ansible.builtin.shell:
        cmd: while [ ! -f /var/lib/cloud/instance/boot-finished ]; do sleep 5; done
      changed_when: false
      timeout: 300  # 5 minute timeout

    # --------------------------------------------------------------------------
    # Dependencies Installation
    # --------------------------------------------------------------------------
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600 # Only update if cache is older than 1 hour

    - name: Install required system packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-pip
        state: present

    # --------------------------------------------------------------------------
    # Base System Configuration (Timezone)
    # --------------------------------------------------------------------------
    - name: Ensure timezone is set to America/New_York
      community.general.timezone:
        name: America/New_York

    # --------------------------------------------------------------------------
    # Docker Installation
    # --------------------------------------------------------------------------
    - name: Add Docker GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
        filename: docker # Explicit filename

    - name: Install Docker packages
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin # Installs 'docker compose' command
        state: present
        update_cache: yes
      register: docker_install_result
      until: docker_install_result is succeeded
      retries: 5
      delay: 15

    - name: Make sure Docker service is running and enabled
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

    - name: Add deployment user to docker group for non-sudo docker commands
      ansible.builtin.user:
        name: "{{ app_user }}" # Use variable defined above
        groups: docker
        append: yes

    # --------------------------------------------------------------------------
    # Application Deployment - Ensuring Clean State
    # --------------------------------------------------------------------------
    - name: Remove existing application directory to ensure clean deploy
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: absent

    - name: Create application directory (freshly, after removal)
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Create config directory on host
      ansible.builtin.file:
        path: "{{ config_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Copy application files from local source to remote host
      ansible.builtin.copy:
        src: "{{ app_source_dir }}"
        dest: "{{ app_dir }}/"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"

    - name: Copy config files to host config directory
      ansible.builtin.copy:
        src: "{{ config_source_dir }}"
        dest: "{{ config_dir }}/"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'

    # --------------------------------------------------------------------------
    # Replace placeholders in config files with environment values
    # --------------------------------------------------------------------------
    - name: Replace placeholders in config files with environment values
      ansible.builtin.replace:
        path: "{{ config_dir }}/pico_iot_config.json"
        regexp: "{{ item.placeholder }}"
        replace: "{{ item.value }}"
      loop:
        - { placeholder: "PLACEHOLDER_MQTT_BROKER", value: "{{ lookup('env', 'MQTT_BROKER_IP') | default('127.0.0.1') }}" }
        - { placeholder: "PLACEHOLDER_API_KEY", value: "{{ lookup('env', 'API_KEY') | default('changeme') }}" }
        - { placeholder: "PLACEHOLDER_HOSTNAME", value: "{{ lookup('env', 'INTERNAL_HOSTNAME') | default('nedserveconfig.eastus.cloudapp.azure.com') }}" }

    # --------------------------------------------------------------------------
    # Docker Build and Run
    # --------------------------------------------------------------------------
    - name: Build Docker image for serve_config from the deployed code
      community.docker.docker_image:
        name: serve_config:latest
        source: build
        build:
          path: "{{ app_dir }}"
          nocache: yes

    - name: Stop and remove existing container (if any) and run new one
      community.docker.docker_container:
        name: serve_config
        image: serve_config:latest
        state: started
        recreate: yes # Force recreation if image/config changes
        restart_policy: unless-stopped
        published_ports:
          - "5000:5000" # Map host port 5000 to container port 5000
        volumes:
          # Mount the host config directory read-only into the container
          - "{{ config_dir }}:/app/config_files:ro"

    # --------------------------------------------------------------------------
    # Verification
    # --------------------------------------------------------------------------
    - name: Wait a few seconds for application inside container to start
      ansible.builtin.pause:
        seconds: 5

    - name: Check if serve_config ping endpoint is responding
      ansible.builtin.uri:
        url: http://127.0.0.1:5000/ping
        method: GET
        status_code: 200 # Expect HTTP 200 OK
      register: ping_check
      until: ping_check.status == 200
      retries: 3 # Retry a few times if it's not immediately ready
      delay: 3 # Wait 3 seconds between retries
      ignore_errors: yes # Don't fail playbook if check fails, just report

    - name: Show final application status
      ansible.builtin.debug:
        msg: "Serve Config Status: {{ 'Running and responding successfully' if ping_check.status == 200 else 'Failed to get successful response from /ping endpoint' }}"
